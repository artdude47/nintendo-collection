@page "/items"
@using Collection.Web.Services
@inject ApiClient Api
@inject HttpClient Http
@inject IJSRuntime JS

<h1 class="mb-3">Nintendo Collection</h1>

<div class="mb-3">
    <input class="ms-3" placeholder="Search title…" @bind="search" />
    <select class="ms-2" @bind="sort">
        <option value="value_desc">Value (high→low)</option>
        <option value="value_asc">Value (low→high)</option>
        <option value="title_asc">Title (A→Z)</option>
        <option value="title_desc">Title (Z→A)</option>
        <option value="created_desc">Newest</option>
        <option value="created_asc">Oldest</option>
    </select>
  <label>Platform:</label>
  <select @bind="selectedPlatform">
    <option value="">(All)</option>
    @foreach (var p in platforms)
    {
      <option value="@p.name">@p.name</option>
    }
  </select>

  <label class="ms-3">CIB:</label>
  <select @bind="selectedCib">
    <option value="">(Any)</option>
    <option value="true">CIB only</option>
    <option value="false">Non-CIB only</option>
  </select>

  <button class="ms-3" @onclick="Load">Apply</button>
  <a class="ms-3" href="@Api.ExportUrl()">Export CSV</a>
</div>

<div class="mb-3">
  <InputFile OnChange="UploadCsvDryRun" /> 
  <button class="ms-2" @onclick="ConfirmImport" disabled="@(!canCommitImport)">Commit last upload</button>
  <span class="ms-2 text-muted">@importStatus</span>
</div>

@if (page.items.Count == 0)
{
  <p>No items.</p>
}
else
{
  <table class="table table-striped table-sm">
    <thead>
      <tr>
        <th>Title</th>
        <th>Platform</th>
        <th>CIB</th>
        <th>Condition</th>
        <th>Est. Value</th>
        <th>Notes</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
    @foreach (var i in page.items)
    {
      <tr>
        <td>@i.title</td>
        <td>@i.platform?.name</td>
        <td>@(i.hasBox && i.hasManual ? "Yes" : "No")</td>
        <td>@i.condition</td>
        <td>@(i.estimatedValue?.ToString("0.##") ?? "")</td>
        <td>@i.notes</td>
        <td>
            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => StartEdit(i)">Edit</button>
            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(i.id)">Delete</button>
        </td>
      </tr>
    }
    </tbody>
  </table>

    @if (editing is not null)
    {
        <hr />
        <h5>Edit Item</h5>
        <div class="row g-2">
            <div class="col-md-6">
                <label class="form-label">Title</label>
                <input class="form-control" @bind="editing.title" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Platform</label>
                <select class="form-select" @bind="editing.platform!.name">
                    @foreach (var p in platforms)
                    {
                        <option value="@p.name">@p.name</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Condition</label>
                <select class="form-select" @bind="editing.condition">
                    @foreach (var c in conditionOptions)
                    {
                        <option value="@c">@c</option>
                    }
                </select>
            </div>

            <div class="col-md-2">
                <label class="form-label">Has Box</label><br />
                <input type="checkbox" class="form-check-input" @bind="editing.hasBox" />
            </div>
            <div class="col-md-2">
                <label class="form-label">Has Manual</label><br />
                <input type="checkbox" class="form-check-input" @bind="editing.hasManual" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Est. Value</label>
                <input class="form-control" type="number" step="0.01"
                       @bind="editing.estimatedValue" />
            </div>
            <div class="col-md-5">
                <label class="form-label">Notes</label>
                <input class="form-control" @bind="editing.notes" />
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-primary me-2" @onclick="SaveEdit">Save</button>
            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            <span class="ms-3 text-muted">@editStatus</span>
        </div>
    }


  <div class="d-flex align-items-center">
    <button @onclick="Prev" disabled="@(_page <= 1)">Prev</button>
    <span class="mx-3">Page @_page of @totalPages ( @(page.total) items )</span>
    <button @onclick="Next" disabled="@(_page >= totalPages)">Next</button>
  </div>
}

@code {
    ApiClient.ItemDto? editing;
    List<ApiClient.PlatformDto> platforms = new();
    ApiClient.Page<ApiClient.ItemDto> page = new()
        {
            total = 0, page = 1, pageSize = 50, items = new()
        };
    string? selectedPlatform;
    string? selectedCib; // "", "true", "false"
    string? search;
    string editStatus = "";
    readonly string[] conditionOptions = new[] { "Poor", "Fair", "Good", "VeryGood", "Excellent", "Mint" };
    string sort = "value_desc";
    int _page = 1;
    int _pageSize = 50;
    int totalPages => Math.Max(1, (int)Math.Ceiling((double)page.total / _pageSize));


    // upload state
    byte[]? lastUpload; string? lastUploadName; bool canCommitImport; string importStatus = "";

    protected override async Task OnInitializedAsync()
    {
        platforms = await Api.GetPlatformsAsync();
        await Load();
    }

    async Task Load()
    {
        bool? isCib = string.IsNullOrEmpty(selectedCib) ? null : selectedCib == "true" ? true : false;
        page = await Api.GetItemsAsync(selectedPlatform, isCib, _page, _pageSize, search, sort);
        //page = await Api.GetItemsAsync(selectedPlatform, isCib, _page, _pageSize);
        //StateHasChanged();
    }

    void Prev() { if (_page > 1) { _page--; _ = Load(); } }
    void Next() { if (_page < totalPages) { _page++; _ = Load(); } }

    async Task UploadCsvDryRun(InputFileChangeEventArgs e)
    {
        importStatus = "Validating upload (dry run)…";
        var file = e.File;
        using var stream = file.OpenReadStream(long.MaxValue);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        lastUpload = ms.ToArray();
        lastUploadName = file.Name;

        using var post = new MemoryStream(lastUpload);
        var json = await Api.ImportCsvAsync(post, file.Name, dryRun: true);
        canCommitImport = true;
        importStatus = "Dry-run OK. Click 'Commit last upload' to insert.";
    }

    async Task ConfirmImport()
    {
        if (lastUpload is null || lastUploadName is null) return;
        importStatus = "Importing…";
        using var post = new MemoryStream(lastUpload);
        var json = await Api.ImportCsvAsync(post, lastUploadName, dryRun: false);
        canCommitImport = false;
        importStatus = "Imported. Refreshing…";
        _page = 1;
        await Load();
    }

    void StartEdit(ApiClient.ItemDto source)
    {
        editing = new ApiClient.ItemDto
        {
            id = source.id,
            title = source.title,
            region = source.region,
            notes = source.notes,
            condition = source.condition,
            hasBox = source.hasBox,
            hasManual = source.hasManual,
            purchasePrice = source.purchasePrice,
            purchaseDate = source.purchaseDate,
            estimatedValue = source.estimatedValue,
            platform = source.platform is null ? null : new ApiClient.PlatformDto
            {
                id = source.platform.id,
                name = source.platform.name
            }
        };
        editStatus = "";
    }

    void CancelEdit()
    {
        editing = null;
        editStatus = "";
    }

    async Task SaveEdit()
    {
        if (editing is null) return;

        // Map platform name back to id (platforms list you already loaded)
        var plat = platforms.FirstOrDefault(p => p.name == editing!.platform?.name);
        if (plat.name is null)
        {
            editStatus = "Select a platform.";
            return;
        }

        // Build payload expected by API (same shape as ItemDto works fine)
        var payload = new ApiClient.ItemDto
        {
            id = editing.id,
            title = editing.title,
            region = editing.region,
            notes = editing.notes,
            condition = editing.condition,
            hasBox = editing.hasBox,
            hasManual = editing.hasManual,
            purchasePrice = editing.purchasePrice,
            purchaseDate = editing.purchaseDate,
            estimatedValue = editing.estimatedValue,
            platform = new ApiClient.PlatformDto { id = plat.id, name = plat.name }
        };

        // The API expects PlatformId, but our DTO nests Platform.
        // Send a minimal anonymous object that matches the server Item:
        var body = new
        {
            id = payload.id,
            title = payload.title,
            region = payload.region,
            notes = payload.notes,
            condition = payload.condition,         // enum string
            hasBox = payload.hasBox,
            hasManual = payload.hasManual,
            purchasePrice = payload.purchasePrice,
            purchaseDate = payload.purchaseDate,
            estimatedValue = payload.estimatedValue,
            platformId = plat.id                   // IMPORTANT
        };

        var ok = await Http.PutAsJsonAsync($"/api/items/{payload.id}", body);
        if (!ok.IsSuccessStatusCode)
        {
            editStatus = $"Save failed: {(int)ok.StatusCode}";
            return;
        }

        editStatus = "Saved.";
        editing = null;
        // refresh list
        _page = 1;
        await Load();
    }

    async Task ConfirmDelete(int id)
    {
        if (!await JSConfirm("Delete this item?")) return;

        var ok = await Api.DeleteItemAsync(id);
        if (!ok) { importStatus = "Delete failed."; return; }
        importStatus = "Deleted.";
        _page = 1;
        await Load();
    }

    async Task<bool> JSConfirm(string message) => await JS.InvokeAsync<bool>("confirm", message);
}
