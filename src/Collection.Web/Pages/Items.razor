@page "/items"
<PageTitle>Nintendo Collection</PageTitle>
@using Collection.Web.Services
@inject ApiClient Api
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav

<h1 class="mb-3 no-select">Nintendo Collection</h1>

<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1080">
    @foreach (var t in toasts)
    {
        <div class="toats show align-items-center border-0 mb-2 @($"text-bg-{t.variant}")" role="alert" aria-live="assertive" aria-atomic="true" >
            <div class="d-flex">
                <div class="toast-body">@t.message</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="() => DismissToast(t)"></button>
            </div>
        </div>
    }
</div>

<div class="mb-3">
    <input class="ms-3" placeholder="Search title…" value="@search" @oninput="OnSearchInput" />
    <select class="ms-2" @onchange="OnSortChange" value="@sort">
        <option value="value_desc">Value (high→low)</option>
        <option value="value_asc">Value (low→high)</option>
        <option value="title_asc">Title (A→Z)</option>
        <option value="title_desc">Title (Z→A)</option>
        <option value="created_desc">Newest</option>
        <option value="created_asc">Oldest</option>
    </select>
  <label>Platform:</label>
  <select @onchange="OnPlatformChange" value="@selectedPlatform">
    <option value="">(All)</option>
    @foreach (var p in platforms)
    {
      <option value="@p.name">@p.name</option>
    }
  </select>

  <label class="ms-3">CIB:</label>
  <select @onchange="OnCibChange" value="@selectedCib">
    <option value="">(Any)</option>
    <option value="true">CIB only</option>
    <option value="false">Non-CIB only</option>
  </select>

  <a class="ms-3" href="@Api.ExportUrl()">Export CSV</a>
</div>

<div class="mb-3">
  <InputFile OnChange="UploadCsvDryRun" /> 
  <button class="ms-2" @onclick="ConfirmImport" disabled="@(!canCommitImport)">Commit last upload</button>
  <span class="ms-2 text-muted">@importStatus</span>
</div>

@if (isLoading)
{
    <div class="small-muted mt-3">Loading...</div>
}
else if (page.items.Count == 0)
{
    <div class="text-muted mt-4">No items found.</div>
}
else
{
    @if (stats is not null)
    {
        <div class="alert alert-light border d-flex flex-wrap gap-4 mb-3">
            <div><strong>Total Items:</strong> @stats.totalItems</div>
            <div><strong>CIB:</strong> @stats.totalCib</div>
            <div><strong>Total Value:</strong> @stats.totalEstimatedValue.ToString("C")</div>
        </div>

        <details class="mb-3">
            <summary>By Platform</summary>
            <table class="table table-sm">
                <thread><tr><th>Platform</th><th>Items</th><th>CIB</th><th>Value</th></tr></thread>
                <tbody>
                    @foreach (var p in stats.byPlatform)
                    {
                        <tr>
                            <td>@p.platform</td>
                            <td>@p.count</td>
                            <td>@p.cib</td>
                            <td>@p.value.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </details>
    }

    <button class="btn btn-success btn-sm me-2" @onclick="() => ShowNew = true">Add Item</button>

    <table class="table table-striped table-sm">
    <thead>
      <tr>
        <th>Title</th>
        <th>Platform</th>
        <th>CIB</th>
        <th>Condition</th>
        <th>Est. Value</th>
        <th>Notes</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
    @foreach (var i in page.items)
    {
      <tr>
        <td>@i.title</td>
        <td>@i.platform?.name</td>
        <td>@(i.hasBox && i.hasManual ? "Yes" : "No")</td>
        <td>@i.condition</td>
        <td>@(i.estimatedValue?.ToString("0.##") ?? "")</td>
        <td>@i.notes</td>
        <td>
            <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => StartEdit(i)">Edit</button>
            <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(i.id)">Delete</button>
        </td>
      </tr>
    }
    </tbody>
  </table>

    @if (editing is not null)
    {
        <hr />
        <h5>Edit Item</h5>
        <div class="row g-2">
            <div class="col-md-6">
                <label class="form-label">Title</label>
                <input class="form-control" @bind="editing.title" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Platform</label>
                <select class="form-select" @bind="editing.platform!.name">
                    @foreach (var p in platforms)
                    {
                        <option value="@p.name">@p.name</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Condition</label>
                <select class="form-select" @bind="editing.condition">
                    @foreach (var c in conditionOptions)
                    {
                        <option value="@c">@c</option>
                    }
                </select>
            </div>

            <div class="col-md-2">
                <label class="form-label">Has Box</label><br />
                <input type="checkbox" class="form-check-input" @bind="editing.hasBox" />
            </div>
            <div class="col-md-2">
                <label class="form-label">Has Manual</label><br />
                <input type="checkbox" class="form-check-input" @bind="editing.hasManual" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Est. Value</label>
                <input class="form-control" type="number" step="0.01"
                       @bind="editing.estimatedValue" />
            </div>
            <div class="col-md-5">
                <label class="form-label">Notes</label>
                <input class="form-control" @bind="editing.notes" />
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-primary me-2" @onclick="SaveEdit">Save</button>
            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            <span class="ms-3 text-muted">@editStatus</span>
        </div>
    }

    @if (ShowNew)
    {
        <hr />
        <h5>Add Item</h5>
        <div class="row g-2">
            <div class="col-md-6">
                <label class="form-label">Title *</label>
                <input class="form-control" @bind="NewItem.title" />
                <div class="text-danger small">@NewErrors["title"]</div>
            </div>
            <div class="col-md-3">
                <label class="form-label">Platform *</label>
                <select class="form-select" @bind="NewPlatformName">
                    <option value="">(Select…)</option>
                    @foreach (var p in platforms)
                    {
                        <option value="@p.name">@p.name</option>
                    }
                </select>
                <div class="text-danger small">@NewErrors["platform"]</div>
            </div>
            <div class="col-md-3">
                <label class="form-label">Condition</label>
                <select class="form-select" @bind="NewItem.condition">
                    @foreach (var c in conditionOptions)
                    {
                        <option value="@c">@c</option>
                    }
                </select>
            </div>

            <div class="col-md-2">
                <label class="form-label">Has Box</label><br />
                <input type="checkbox" class="form-check-input" @bind="NewItem.hasBox" />
            </div>
            <div class="col-md-2">
                <label class="form-label">Has Manual</label><br />
                <input type="checkbox" class="form-check-input" @bind="NewItem.hasManual" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Est. Value</label>
                <input class="form-control" type="number" step="0.01" @bind="NewItem.estimatedValue" />
            </div>
            <div class="col-md-5">
                <label class="form-label">Notes</label>
                <input class="form-control" @bind="NewItem.notes" />
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-primary me-2" @onclick="Create">Create</button>
            <button class="btn btn-secondary" @onclick="() => { ShowNew = false; ResetNew(); }">Cancel</button>
            <span class="ms-3 text-muted">@createStatus</span>
        </div>
    }


  <div class="d-flex align-items-center">
    <button @onclick="Prev" disabled="@(_page <= 1)">Prev</button>
    <span class="mx-3">Page @_page of @totalPages ( @(page.total) items )</span>
    <button @onclick="Next" disabled="@(_page >= totalPages)">Next</button>
  </div>
}

@code {

    ApiClient.ItemDto? editing;
    List<ApiClient.PlatformDto> platforms = new();
    ApiClient.Page<ApiClient.ItemDto> page = new()
        {
            total = 0, page = 1, pageSize = 50, items = new()
        };
    string? selectedPlatform;
    string? selectedCib; // "", "true", "false"
    string? search;
    string editStatus = "";
    readonly string[] conditionOptions = new[] { "Poor", "Fair", "Good", "VeryGood", "Excellent", "Mint" };
    string sort = "value_desc";
    int _page = 1;
    int _pageSize = 50;
    int totalPages => Math.Max(1, (int)Math.Ceiling((double)page.total / _pageSize));
    ApiClient.StatsDto stats = new();
    CancellationTokenSource? _searchCts;
    bool ShowNew;
    ApiClient.ItemDto NewItem = new() { condition = "Good", region = "NTSC-U" };
    string? NewPlatformName;
    Dictionary<string,string> NewErrors = new() { ["title"] = "", ["platform"] = "" };
    string createStatus = "";
    record Toast(string message, string variant, DateTime expires);
    List<Toast> toasts = new();
    bool _queryApplied;
    bool isLoading;


    void ToastInfo(string msg) => AddToast(msg, "secondary");
    void ToastOk(string msg) => AddToast(msg, "success");
    void ToastWarn(string msg) => AddToast(msg, "warning");
    void ToastError(string msg) => AddToast(msg, "danger");

    void AddToast(string msg, string variant)
    {
        var t = new Toast(msg, variant, DateTime.UtcNow.AddSeconds(4));
        toasts.Add(t);
        _ = AutoDismiss(t);
    }

    async Task AutoDismiss(Toast t)
    {
        await Task.Delay(4000);
        DismissToast(t);
    }

    void DismissToast(Toast t)
    {
        toasts.Remove(t);
        StateHasChanged();
    }

    // upload state
    byte[]? lastUpload; string? lastUploadName; bool canCommitImport; string importStatus = "";

    void ApplyQueryOnce()
    {
        if (_queryApplied) return;
        _queryApplied = true;

        var uri = new Uri(Nav.Uri);
        var qs = System.Web.HttpUtility.ParseQueryString(uri.Query);

        selectedPlatform = NullIfEmpty(qs["platform"]);
        selectedCib = NullIfEmpty(qs["isCib"]);       // "true" | "false" | null
        search = NullIfEmpty(qs["q"]);
        sort = NullIfEmpty(qs["sort"]) ?? "value_desc";
        if (int.TryParse(qs["page"], out var p) && p > 0) _page = p;

        static string? NullIfEmpty(string? s) => string.IsNullOrWhiteSpace(s) ? null : s;
    }

    void UpdateQueryUrl()
    {
        // Build query dict
        var dict = new Dictionary<string, object?>();
        if (!string.IsNullOrWhiteSpace(selectedPlatform)) dict["platform"] = selectedPlatform;
        if (!string.IsNullOrWhiteSpace(selectedCib)) dict["isCib"] = selectedCib;
        if (!string.IsNullOrWhiteSpace(search)) dict["q"] = search;
        if (!string.IsNullOrWhiteSpace(sort) && sort != "value_desc") dict["sort"] = sort; // omit default
        if (_page > 1) dict["page"] = _page;

        var target = Nav.GetUriWithQueryParameters(dict);

        if (string.Equals(target, Nav.Uri, StringComparison.OrdinalIgnoreCase))
            return; // no change))

        var uri = Nav.GetUriWithQueryParameters(dict);
        // replace history entry so Back button isn’t spammy
        Nav.NavigateTo(uri, replace: true);
    }

    protected override async Task OnInitializedAsync()
    {
        platforms = await Api.GetPlatformsAsync();
        ApplyQueryOnce();
        await Load();
        stats = await Api.GetStatsAsync();
    }

    async Task Load()
    {
        isLoading = true;
        try
        {
            bool? isCib = string.IsNullOrEmpty(selectedCib) ? null : selectedCib == "true" ? true : false;
            page = await Api.GetItemsAsync(selectedPlatform, isCib, _page, _pageSize, search, sort);
            stats = await Api.GetStatsAsync();
        }
        finally
        {
            isLoading = false;
            UpdateQueryUrl();
        }
    }

    void Prev() { if (_page > 1) { _page--; _ = Load(); } }
    void Next() { if (_page < totalPages) { _page++; _ = Load(); } }

    async Task UploadCsvDryRun(InputFileChangeEventArgs e)
    {
        importStatus = "Validating upload (dry run)…";
        var file = e.File;
        using var stream = file.OpenReadStream(long.MaxValue);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        lastUpload = ms.ToArray();
        lastUploadName = file.Name;

        using var post = new MemoryStream(lastUpload);
        var json = await Api.ImportCsvAsync(post, file.Name, dryRun: true);
        canCommitImport = true;
        importStatus = "Dry-run OK. Click 'Commit last upload' to insert.";
    }

    async Task ConfirmImport()
    {
        if (lastUpload is null || lastUploadName is null) return;
        importStatus = "Importing…";
        using var post = new MemoryStream(lastUpload);
        var json = await Api.ImportCsvAsync(post, lastUploadName, dryRun: false);
        canCommitImport = false;
        importStatus = "Imported. Refreshing…";
        _page = 1;
        await Load();
        stats = await Api.GetStatsAsync();
    }

    void OnSearchInput(ChangeEventArgs e)
    {
        search = e.Value?.ToString();
        _ = DebouncedLoad();
    }

    void OnPlatformChange(ChangeEventArgs e)
    {
        selectedPlatform = e.Value?.ToString();
        _page = 1;
        _ = DebouncedLoad();
    }

    void OnCibChange(ChangeEventArgs e)
    {
        selectedCib = e.Value?.ToString();
        _page = 1;
        _ = DebouncedLoad();
    }

    void OnSortChange(ChangeEventArgs e)
    {
        sort = e.Value?.ToString() ?? "value_desc";
        _page = 1;
        _ = DebouncedLoad();
    }

    async Task DebouncedLoad(int delayMs = 300)
    {
        _searchCts?.Cancel();
        _searchCts = new CancellationTokenSource();
        var token = _searchCts.Token;

        try
        {
            await Task.Delay(delayMs, token);
            if (token.IsCancellationRequested) return;

            await Load();
            StateHasChanged();
        }
        catch (TaskCanceledException) { }
    }

    void StartEdit(ApiClient.ItemDto source)
    {
        editing = new ApiClient.ItemDto
        {
            id = source.id,
            title = source.title,
            region = source.region,
            notes = source.notes,
            condition = source.condition,
            hasBox = source.hasBox,
            hasManual = source.hasManual,
            purchasePrice = source.purchasePrice,
            purchaseDate = source.purchaseDate,
            estimatedValue = source.estimatedValue,
            platform = source.platform is null ? null : new ApiClient.PlatformDto
            {
                id = source.platform.id,
                name = source.platform.name
            }
        };
        editStatus = "";
    }

    void CancelEdit()
    {
        editing = null;
        editStatus = "";
    }

    async Task SaveEdit()
    {
        if (editing is null) return;

        // Map platform name back to id (platforms list you already loaded)
        var plat = platforms.FirstOrDefault(p => p.name == editing!.platform?.name);
        if (plat.name is null)
        {
            editStatus = "Select a platform.";
            return;
        }

        // Build payload expected by API (same shape as ItemDto works fine)
        var payload = new ApiClient.ItemDto
        {
            id = editing.id,
            title = editing.title,
            region = editing.region,
            notes = editing.notes,
            condition = editing.condition,
            hasBox = editing.hasBox,
            hasManual = editing.hasManual,
            purchasePrice = editing.purchasePrice,
            purchaseDate = editing.purchaseDate,
            estimatedValue = editing.estimatedValue,
            platform = new ApiClient.PlatformDto { id = plat.id, name = plat.name }
        };

        // The API expects PlatformId, but our DTO nests Platform.
        // Send a minimal anonymous object that matches the server Item:
        var body = new
        {
            id = payload.id,
            title = payload.title,
            region = payload.region,
            notes = payload.notes,
            condition = payload.condition,         // enum string
            hasBox = payload.hasBox,
            hasManual = payload.hasManual,
            purchasePrice = payload.purchasePrice,
            purchaseDate = payload.purchaseDate,
            estimatedValue = payload.estimatedValue,
            platformId = plat.id                   // IMPORTANT
        };

        var ok = await Http.PutAsJsonAsync($"/api/items/{payload.id}", body);
        if (!ok.IsSuccessStatusCode)
        {
            editStatus = $"Save failed: {(int)ok.StatusCode}";
            return;
        }

        editStatus = "Saved.";
        editing = null;
        // refresh list
        _page = 1;
        await Load();
        stats = await Api.GetStatsAsync();
    }

    async Task ConfirmDelete(int id)
    {
        if (!await JSConfirm("Delete this item?")) return;

        var ok = await Api.DeleteItemAsync(id);
        if (!ok) { importStatus = "Delete failed."; return; }
        importStatus = "Deleted.";
        _page = 1;
        await Load();
        stats = await Api.GetStatsAsync();
    }

    void ResetNew()
    {
        NewItem = new() { condition = "Good", region = "NTSC-U" };
        NewPlatformName = null;
        NewErrors["title"] = "";
        NewErrors["platform"] = "";
        createStatus = "";
    }

    bool ValidateNew()
    {
        NewErrors["title"] = string.IsNullOrWhiteSpace(NewItem.title) ? "Title is required." : "";
        NewErrors["platform"] = string.IsNullOrWhiteSpace(NewPlatformName) ? "Platform is required." : "";
        return NewErrors["title"] == "" && NewErrors["platform"] == "";
    }

    async Task Create()
    {
        if (!ValidateNew()) return;

        var plat = platforms.First(p => p.name == NewPlatformName);
        var body = new
        {
            title = NewItem.title,
            platformId = plat.id,           // API expects PlatformId
            region = NewItem.region,
            condition = NewItem.condition,  // enum string
            hasBox = NewItem.hasBox,
            hasManual = NewItem.hasManual,
            estimatedValue = NewItem.estimatedValue,
            notes = NewItem.notes
        };

        createStatus = "Saving…";
        var ok = await Api.CreateItemAsync(body);
        if (!ok) { createStatus = "Create failed."; return; }

        createStatus = "Created.";
        ShowNew = false;
        ResetNew();

        // refresh list & stats
        _page = 1;
        await Load();
        stats = await Api.GetStatsAsync();
        StateHasChanged();
    }

    async Task<bool> JSConfirm(string message) => await JS.InvokeAsync<bool>("confirm", message);
}
