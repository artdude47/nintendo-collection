@page "/items"
<PageTitle>Nintendo Collection</PageTitle>
@using Collection.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject ApiClient Api
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav


<!-- Header -->
<h1 class="mb-2 page-title no-select">Nintendo Collection</h1>

<!-- TOASTS -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1080">
    @foreach (var t in toasts)
    {
        <div class="toast show align-items-center border-0 mb-2 @($"text-bg-{t.variant}")"
            role="alert" aria-live="assertive" aria-atomic="true" >
            <div class="d-flex">
                <div class="toast-body">@t.message</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="() => DismissToast(t)"></button>
            </div>
        </div>
    }
</div>

<!-- Toolbar: Primary actions live here -->
<div class="d-flex flex-wrap justify-content-between align-items-center gap-2 mb-3">
    <div class="d-flex align-items-center gap-2">
        <AuthorizeView>
            <Authorized>
                <button class="btn btn-success btn-sm" title="Add a new item" @onclick="OpenNewModal">
                    <span class="oi oi-plus me-1"></span>Add Item
                </button>
            </Authorized>
        </AuthorizeView>

        <a class="btn btn-outline-secondary btn-sm" title="Download your collection as CSV" href="@Api.ExportUrl()">
            <span class="oi oi-data-transfer-download me-1"></span>Export CSV
        </a>

        <label for="pageSizeSel" class="form-label mb-0 small text-muted">Results Per Page:</label>
        <select id="pageSizeSel" class="form-select form-select-sm w-auto" @onchange="OnPageSizeChange" value="@_pageSize">
            @foreach (var s in pageSizeOptions)
            {
                <option value="@s">@s</option>
            }
        </select>
    </div>

    <div class="d-flex align-items-center gap-2 flex-grow-1" style="min-width:240px;max-width:520px;">
        <label for="searchBox" class="form-label mb-0 small text-muted me-1">Search:</label>
        <input id="searchBox" 
            class="form-control form-control-sm header-search"
            placeholder="Search Title..."
            value="@search"
            @oninput="OnSearchInput" />
        <button class="btn btn-outline-secondary btn-sm"
            title="Clear Search"
            @onclick="ClearSearch"
            disabled="@(string.IsNullOrWhiteSpace(search))">
            x
        </button>
    </div>

    <div class="d-flex align-items-center gap-2">
        <label class="form-label mb-0 small text-muted">Kind:</label>
        <select class="form-select form-select-sm w-auto" @onchange="OnKindChange" value="@selectedKind">
            <option value="">(Any)</option>
            @foreach (var k in kindOptions)
            {
                <option value="@k">@k</option>
            }
        </select>

        <label class="form-label mb-0 small text-muted">Region:</label>
        <select class="form-select form-select-sm w-auto" @onchange="OnRegionChange" value="@selectedRegion">
            <option value="">(Any)</option>
            @foreach (var r in regionOptions)
            {
                <option value="@r">@r</option>
            }
        </select>
    </div>

    <AuthorizeView>
        <Authorized>
            <form method="post" action="/logout" class="d-inline">
                <button type="submit" class="btn btn-outline-secondary btn-sm">Sign out</button>
            </form>
        </Authorized>
        <NotAuthorized>
            <button type="button"
                class="btn btn-outline-primary btn-sm"
                title="Sign In"
                @onclick="OpenLoginModal">
                Sign In
            </button>
        </NotAuthorized>
    </AuthorizeView>
</div>

@if (!string.IsNullOrWhiteSpace(selectedPlatform) ||
    !string.IsNullOrWhiteSpace(selectedCib) ||
    !string.IsNullOrWhiteSpace(selectedKind) ||
    !string.IsNullOrWhiteSpace(selectedRegion) ||
    !string.IsNullOrWhiteSpace(search))
{
    <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
        <span class="small text-muted me-1">Filters:</span>

        @if (!string.IsNullOrWhiteSpace(selectedPlatform))
        {
            <span class="badge rounded-pill text-bg-secondary">
                Platform: @selectedPlatform
                <button type="button" class="btn-close btn-close-white btn-close-sm ms-1"
                        aria-label="Clear platform" @onclick="@(() => { selectedPlatform = null; _ = DebouncedLoad(0); })"></button>
            </span>
        }
        @if (!string.IsNullOrWhiteSpace(selectedCib))
        {
            <span class="badge rounded-pill text-bg-secondary">
                CIB: @(selectedCib == "true" ? "Yes" : "No")
                <button type="button" class="btn-close btn-close-white btn-close-sm ms-1"
                        aria-label="Clear CIB" @onclick="@(() => { selectedCib = null; _ = DebouncedLoad(0); })"></button>
            </span>
        }
        @if (!string.IsNullOrWhiteSpace(selectedKind))
        {
            <span class="badge rounded-pill text-bg-secondary">
                Kind: @selectedKind
                <button type="button" class="btn-close btn-close-white btn-close-sm ms-1"
                        aria-label="Clear kind" @onclick="@(() => { selectedKind = null; _ = DebouncedLoad(0); })"></button>
            </span>
        }
        @if (!string.IsNullOrWhiteSpace(selectedRegion))
        {
            <span class="badge rounded-pill text-bg-secondary">
                Region: @selectedRegion
                <button type="button" class="btn-close btn-close-white btn-close-sm ms-1"
                        aria-label="Clear region" @onclick="@(() => { selectedRegion = null; _ = DebouncedLoad(0); })"></button>
            </span>
        }
        @if (!string.IsNullOrWhiteSpace(search))
        {
            <span class="badge rounded-pill text-bg-secondary">
                Search: “@search”
                <button type="button" class="btn-close btn-close-white btn-close-sm ms-1"
                        aria-label="Clear search" @onclick="@(() => { search = ""; _ = DebouncedLoad(0); })"></button>
            </span>
        }

        <button class="btn btn-link btn-sm text-decoration-none"
                @onclick="@(() => { selectedPlatform = null; selectedCib = null; selectedKind = null; selectedRegion = null; search = ""; _page = 1; _ = DebouncedLoad(0); })">
            Clear all
        </button>
    </div>
}

<!-- Stats Summary Card -->
@if (stats is not null)
{
    <div class="alert alert-light border d-flex flex-wrap gap-4 align-items-center mb-3">
        <div><strong>Total Items:</strong> @stats.totalItems</div>
        <div><strong>CIB:</strong> @stats.totalCib</div>
        <div><strong>Total Purchase Price:</strong> @stats.totalPurchasePrice.ToString("C")</div>
        <div><strong>Total Estimated Value:</strong> @stats.totalEstimatedValue.ToString("C")</div>
        <div><strong>Est. Profit:</strong> @stats.totalEstimatedProfit.ToString("C")</div>
    </div>
}

<!-- CSV Utilities -->
<AuthorizeView>
    <Authorized>
        <details class="mb-3">
            <summary class="fw-semibold">Data (CSV Import)</summary>
            <div class="mt-2 d-flex flex-wrap align-items-center gap-2">
                <InputFile OnChange="UploadCsvDryRun" />
                <button class="btn btn-outline-primary btn-sm" @onclick="ConfirmImport" disabled="@( !canCommitImport )">
                    Commit last upload
                </button>
                <span class="text-muted small">@importStatus</span>
            </div>
            <div class="form-text mt-1">
                Upload a CSV to validate first (dry run), then commit to insert items.
            </div>
        </details>
    </Authorized>
</AuthorizeView>

<!-- Table Area (Loading/Empty/Data) -->
@if (isLoading){
    <div class="small text-muted">Loading...</div>
}
else if (page.items.Count == 0)
{
    <div class="text-muted">No Items Found.</div>
}
else {
    <table class="table table-striped table-sm table-collection">
        <colgroup>
            <col class="col-title" />
            <col class="col-platform" />
            <col class="col-cib" />
            <col class="col-condition" />
            <col class="col-purchase" />
            <col class="col-value" />
            <col class="col-kind" />
            <col class="col-actions" />
        </colgroup>

        <thead>
                <tr>
                    <th role="button" title="Sort by Title" @onclick='() => SetSort("title")'>
                        Title @SortGlyph("title")
                    </th>
                    <th role="button" title="Sort by Platform" @onclick='() => SetSort("platform")'>
                        Platform @SortGlyph("platform")
                    </th>
                    <th role="button" title="Sort by CIB" @onclick='() => SetSort("cib")'>
                        CIB @SortGlyph("cib")
                    </th>
                    <th role="button" title="Sort by Condition" @onclick='() => SetSort("condition")'>
                        Condition @SortGlyph("condition")
                    </th>
                    <th role="button" title="Sort by Purchase" @onclick='() => SetSort("purchase")'>
                        Purchase Price @SortGlyph("purchase")
                    </th>
                    <th role="button" title="Sort by Value" @onclick='() => SetSort("value")'>
                        Est. Value @SortGlyph("value")
                    </th>
                    <th role="button" title="Sort by Kind" @onclick='() => SetSort("kind")'>
                        Kind @SortGlyph("kind")
                    </th>
                    <th>Actions</th>
                </tr>
        </thead>

    <tbody>
        @foreach (var i in page.items)
        {
          <tr class="table-row-click"
            style="cursor:pointer"
            @onclick="() => OpenDetails(i.id)">

            <td>@i.title</td>
            <td>@i.platform?.name</td>
            <td>@(i.hasBox && i.hasManual ? "Yes" : "No")</td>
            <td>@i.condition</td>
            <td>@(i.purchasePrice?.ToString("0.##") ?? "0")</td>
            <td>@(i.estimatedValue?.ToString("0.##") ?? "")</td>
            <td>@(i.kind?.ToString() ?? "")</td>

            <!-- stop clicks in this cell from reaching the row-->
            <td @onclick:stopPropagation="true">
                <AuthorizeView>
                    <Authorized>
                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => StartEdit(i)">Edit</button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(i.id)">Delete</button>
                    </Authorized>
                    <NotAuthorized>
                                <span class="text-muted small">View Only</span>
                    </NotAuthorized>
                </AuthorizeView>
            </td>
          </tr>
        }
    </tbody>
  </table>

  <!-- Pagination -->
  <div class="d-flex align-items-center">
      <button class="btn btn-sm btn-outline-secondary" @onclick="Prev" disabled="@(_page <= 1)">Prev</button>

      <span class="mx-3">Page @_page of @totalPages ( @(page.total) items )</span>

      <button class="btn btn-sm btn-outline-secondary" @onclick="Next" disabled="@(_page >= totalPages)">Next</button>
  </div>
}


<!-- Edit Item Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CancelEdit"></button>
            </div>

            <div class="modal-body">
                @if (editing is not null)
                {
                    <div class="row g-3">
                        <div class="col-12">
                            <label class="form-label" for="edit-title">Title *</label>
                            <input id="edit-title" class="form-control" @bind="editing.title" @bind:event="oninput" maxlength="200" placeholder="Enter title…" autofocus />
                        </div>

                        <div class="col-md-4">
                            <label class="form-label">Platform *</label>
                            <select class="form-select" @bind="editing.platform!.name">
                                @foreach (var p in platforms)
                                {
                                    <option value="@p.name">@p.name</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label class="form-label">Kind</label>
                            <select class="form-select" @bind="editing.kind">
                                @foreach (var k in kindOptions)
                                {
                                    <option value="@k">@k</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-4">
                            <label class="form-label">Region</label>
                            <input class="form-control" @bind="editing.region" placeholder="e.g., NTSC-U, PAL" />
                        </div>

                        <div class="col-md-4">
                            <label class="form-label">Condition</label>
                            <select class="form-select" @bind="editing.condition">
                                @foreach (var c in conditionOptions)
                                {
                                    <option value="@c">@c</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-2 d-flex align-items-end gap-2">
                            <div class="form-check">
                                <input id="edit-box" type="checkbox" class="form-check-input" @bind="editing.hasBox" />
                                <label for="edit-box" class="form-check-label">Has Box</label>
                            </div>
                        </div>

                        <div class="col-md-3 d-flex align-items-end gap-2">
                            <div class="form-check">
                                <input id="edit-manual" type="checkbox" class="form-check-input" @bind="editing.hasManual" />
                                <label for="edit-manual" class="form-check-label">Has Manual</label>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">Est. Value</label>
                            <input class="form-control" type="number" step="0.01" @bind="editing.estimatedValue" />
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">Purchase Price</label>
                            <input class="form-control" type="number" step="0.01" @bind="editing.purchasePrice" />
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">Purchase Date</label>
                            <input class="form-control" type="date" value="@ToDateInputValue(editing?.purchaseDate)" @onchange="OnEditPurchaseDateChanged" />
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">Release Year</label>
                            <input class="form-control" type="number" @bind="editing.releaseYear" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Publisher</label>
                            <input class="form-control" @bind="editing.publisher" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Developer</label>
                            <input class="form-control" @bind="editing.developer" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Genre</label>
                            <input class="form-control" @bind="editing.genre" placeholder="e.g., Platformer, RPG" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Barcode</label>
                            <input class="form-control" @bind="editing.barcode" />
                        </div>

                        <div class="col-12">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" rows="4" @bind="editing.notes" placeholder="Long notes…"></textarea>
                        </div>
                    </div>

                    <div class="small text-muted mt-2">@editStatus</div>
                }
                else
                {
                    <div class="text-muted">No item selected.</div>
                }
            </div>

            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CancelEdit">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveEdit">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- New Item Modal -->
<div class="modal fade" id="newModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseNewModal"></button>
            </div>

            <div class="modal-body">
                <div class="row g-3">
                    <div class="col-12">
                        <label class="form-label">Title *</label>
                        <input class="form-control" @bind="NewItem.title" />
                        <div class="text-danger small">@NewErrors["title"]</div>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Platform *</label>
                        <select class="form-select" @bind="NewPlatformName">
                            <option value="">(Select…)</option>
                            @foreach (var p in platforms)
                            {
                                <option value="@p.name">@p.name</option>
                            }
                        </select>
                        <div class="text-danger small">@NewErrors["platform"]</div>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Kind</label>
                        <select class="form-select" @bind="NewItem.kind">
                            @foreach (var k in kindOptions)
                            {
                                <option value="@k">@k</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Region</label>
                        <input class="form-control" @bind="NewItem.region" placeholder="e.g., NTSC-U, PAL" />
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Condition</label>
                        <select class="form-select" @bind="NewItem.condition">
                            @foreach (var c in conditionOptions)
                            {
                                <option value="@c">@c</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-2 d-flex align-items-end">
                        <div class="form-check">
                            <input id="new-box" type="checkbox" class="form-check-input" @bind="NewItem.hasBox" />
                            <label for="new-box" class="form-check-label">Has Box</label>
                        </div>
                    </div>

                    <div class="col-md-2 d-flex align-items-end">
                        <div class="form-check">
                            <input id="new-manual" type="checkbox" class="form-check-input" @bind="NewItem.hasManual" />
                            <label for="new-manual" class="form-check-label">Has Manual</label>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Est. Value</label>
                        <input class="form-control" type="number" step="0.01" @bind="NewItem.estimatedValue" />
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Purchase Price</label>
                        <input class="form-control" type="number" step="0.01" @bind="NewItem.purchasePrice" />
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Purchase Date</label>
                        <input class="form-control" type="date" value="@ToDateInputValue(editing?.purchaseDate)" @onchange="OnNewPurchaseDateChanged" />
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Release Year</label>
                        <input class="form-control" type="number" @bind="NewItem.releaseYear" />
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Publisher</label>
                        <input class="form-control" @bind="NewItem.publisher" />
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Developer</label>
                        <input class="form-control" @bind="NewItem.developer" />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Genre</label>
                        <input class="form-control" @bind="NewItem.genre" />
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Barcode</label>
                        <input class="form-control" @bind="NewItem.barcode" />
                    </div>

                    <div class="col-12">
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" rows="4" @bind="NewItem.notes" placeholder="Long notes…"></textarea>
                    </div>
                </div>

                <div class="small text-muted mt-2">@createStatus</div>
            </div>

            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseNewModal">Cancel</button>
                <button class="btn btn-primary" @onclick="Create">Create</button>
            </div>
        </div>
    </div>
</div>

<!-- Item Detail Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Item Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@(() => showDetails = false)"></button>
            </div>

            <div class="modal-body">
                @if (details is null)
                {
                    <div class="text-muted">Loading…</div>
                }
                else
                {
                    <div class="mb-2">
                        <strong>@details.title</strong>
                        <div class="text-muted">@details.platform?.name • @details.region</div>
                    </div>

                    <dl class="row mb-3">
                        <dt class="col-sm-3">Kind</dt>
                        <dd class="col-sm-9">@details.kind</dd>

                        <dt class="col-sm-3">Condition</dt>
                        <dd class="col-sm-9">
                            @details.condition
                            (@(details.hasBox ? "Box" : "No Box"); @(details.hasManual ? "Manual" : "No Manual"))
                        </dd>

                        <dt class="col-sm-3">Purchase Price</dt>
                        <dd class="col-sm-9">@FmtMoney(details.purchasePrice)</dd>

                        <dt class="col-sm-3">Purchase Date</dt>
                        <dd class="col-sm-9">@FmtDateISO(details.purchaseDate)</dd>

                        <dt class="col-sm-3">Estimated Value</dt>
                        <dd class="col-sm-9">@FmtMoney(details.estimatedValue)</dd>

                        <dt class="col-sm-3">Publisher</dt>
                        <dd class="col-sm-9">@details.publisher</dd>

                        <dt class="col-sm-3">Developer</dt>
                        <dd class="col-sm-9">@details.developer</dd>

                        <dt class="col-sm-3">Genre</dt>
                        <dd class="col-sm-9">@details.genre</dd>

                        <dt class="col-sm-3">Release Year</dt>
                        <dd class="col-sm-9">@details.releaseYear</dd>

                        <dt class="col-sm-3">Barcode</dt>
                        <dd class="col-sm-9">@details.barcode</dd>
                    </dl>

                    <div>
                        <label class="form-label">Notes</label>
                        <textarea class="form-control" rows="5" readonly>@details.notes</textarea>
                    </div>
                }
            </div>

            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal" @onclick="@(() => showDetails = false)">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Login Modal -->
<div class="modal fade" id="loginModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Admin Sign In</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseLoginModal"></button>
            </div>

            <div class="modal-body">
                <form id="loginForm" method="post" action="/login">
                    <div class="mb-3">
                        <label class="form-label" for="login-password">Password</label>
                        <input id="login-password"
                               name="Password"                   
                        type="@(_showPw ? "text" : "password")"
                        class="form-control"
                        @bind="_loginPw" @bind:event="oninput"
                        placeholder="Admin password"
                        autocomplete="current-password" />
                        <div class="form-text mt-1">
                            <input class="form-check-input me-2" type="checkbox" id="showPw" @bind="_showPw" />
                            <label class="form-check-label" for="showPw">Show password</label>
                        </div>
                    </div>
                </form>

                @if (!string.IsNullOrEmpty(_loginError))
                {
                    <div class="alert alert-danger py-2 mb-0">@_loginError</div>
                }
            </div>

            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseLoginModal">Cancel</button>

                <button type="submit" form="loginForm" class="btn btn-primary" disabled="@_loginBusy">
                    @(_loginBusy ? "Signing in…" : "Sign in")
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    // ---- State & DI ------
    ApiClient.ItemDto? editing;
    List<ApiClient.PlatformDto> platforms = new();
    ApiClient.Page<ApiClient.ItemDto> page = new()
        {
            total = 0, page = 1, pageSize = 50, items = new()
        };

    string? selectedPlatform;
    string? selectedCib; 
    string? search;

    string editStatus = "";
    readonly string[] conditionOptions = new[] { "Poor", "Fair", "Good", "VeryGood", "Excellent", "Mint" };
    readonly string[] kindOptions = new[] { "Game", "Console", "Controller", "Peripheral", "Accessory", "Other" };
    string sort = "value_desc";
    int _page = 1;
    int _pageSize = 50;
    int totalPages => Math.Max(1, (int)Math.Ceiling((double)page.total / _pageSize));

    ApiClient.StatsDto stats = new();
    CancellationTokenSource? _searchCts;
    bool ShowNew;
    ApiClient.ItemDto NewItem = new() { condition = "Good", region = "NTSC-U" };
    string? NewPlatformName;
    Dictionary<string,string> NewErrors = new() { ["title"] = "", ["platform"] = "" };
    string createStatus = "";

    record Toast(string message, string variant, DateTime expires);
    List<Toast> toasts = new();

    bool _queryApplied;
    bool isLoading;

    readonly int[] pageSizeOptions = new[] { 25, 50, 100, 200 };

    ApiClient.ItemDto? details;
    bool showDetails;

    string FmtMoney(decimal? v) => v is null ? "" : v.Value.ToString("C");
    string FmtDate(DateOnly? d) => d is null ? "" : d.Value.ToString("yyyy-MM-dd");

    string _loginPw = "";
    bool _showPw = false;
    bool _loginBusy = false;
    string _loginError = "";

    string? selectedKind;
    string? selectedRegion;

    readonly string[] regionOptions = new[] { "NTSC-U", "NTSC-J", "PAL", "Other" };

    // ---- Toast Helpers ----
    void ToastInfo(string msg) => AddToast(msg, "secondary");
    void ToastOk(string msg) => AddToast(msg, "success");
    void ToastWarn(string msg) => AddToast(msg, "warning");
    void ToastError(string msg) => AddToast(msg, "danger");

    void AddToast(string msg, string variant)
    {
        var t = new Toast(msg, variant, DateTime.UtcNow.AddSeconds(4));
        toasts.Add(t);
        _ = AutoDismiss(t);
    }

    async Task AutoDismiss(Toast t)
    {
        await Task.Delay(4000);
        DismissToast(t);
    }

    void DismissToast(Toast t)
    {
        toasts.Remove(t);
        StateHasChanged();
    }

    // ---- Sorting UI ----
    RenderFragment SortGlyph(string key) => builder =>
    {
        bool isActive = sort.StartsWith(key, StringComparison.OrdinalIgnoreCase);
        if (isActive)
        {
            bool isAsc = sort.EndsWith("_asc", StringComparison.OrdinalIgnoreCase);
            builder.OpenElement(0, "span");
            builder.AddAttribute(1, "class", "sort-glyph");
            builder.AddContent(2, isAsc ? "▲" : "▼");
            builder.CloseElement();
        }
        else
        {
            builder.OpenElement(3, "span");
            builder.AddAttribute(4, "class", "sort-hint");
            builder.AddContent(5, "⇵");
            builder.CloseElement();
        }
    };

    void SetSort(string key)
    {
        if (sort.StartsWith(key, StringComparison.OrdinalIgnoreCase))
        {
            sort = sort.EndsWith("_asc", StringComparison.OrdinalIgnoreCase) ? $"{key}_desc" : $"{key}_asc";
        }
        else
        {
            sort = key switch
            {
                "value" => "value_desc",
                "title" => "title_asc",
                "platform" => "platform_asc",
                "cib" => "cib_desc",
                "condition" => "condition_desc",
                "kind" => "kind_asc",
                _ => $"{key}_asc"
            };
        }
        _page = 1;
        _ = DebouncedLoad(0);
    }

    //---- Query String Sync ----
    void ApplyQueryOnce()
    {
        if (_queryApplied) return;
        _queryApplied = true;

        var uri = new Uri(Nav.Uri);
        var qs = System.Web.HttpUtility.ParseQueryString(uri.Query);

        selectedPlatform = NullIfEmpty(qs["platform"]);
        selectedCib = NullIfEmpty(qs["isCib"]);       
        search = NullIfEmpty(qs["q"]);
        sort = NullIfEmpty(qs["sort"]) ?? "value_desc";
        selectedKind = NullIfEmpty(qs["kind"]);
        selectedRegion = NullIfEmpty(qs["region"]);


        if (int.TryParse(qs["page"], out var p) && p > 0) _page = p;
        if (int.TryParse(qs["pageSize"], out var ps) && ps > 0) _pageSize = ps;

        static string? NullIfEmpty(string? s) => string.IsNullOrWhiteSpace(s) ? null : s;
    }

    void UpdateQueryUrl()
    {
        var dict = new Dictionary<string, object?>();
        if (!string.IsNullOrWhiteSpace(selectedPlatform)) dict["platform"] = selectedPlatform;
        if (!string.IsNullOrWhiteSpace(selectedCib)) dict["isCib"] = selectedCib;
        if (!string.IsNullOrWhiteSpace(search)) dict["q"] = search;
        if (!string.IsNullOrWhiteSpace(sort) && sort != "value_desc") dict["sort"] = sort; 
        if (!string.IsNullOrEmpty(selectedKind)) dict["kind"] = selectedKind;
        if (!string.IsNullOrEmpty(selectedRegion)) dict["region"] = selectedRegion;
        if (_page > 1) dict["page"] = _page;
        if (_pageSize != 50) dict["pageSize"] = _pageSize; 

        var target = Nav.GetUriWithQueryParameters(dict);

        if (string.Equals(target, Nav.Uri, StringComparison.OrdinalIgnoreCase))
            return; 

        var uri = Nav.GetUriWithQueryParameters(dict);
        Nav.NavigateTo(uri, replace: true);
    }

    //---- Page Size Control ----
    void OnPageSizeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var s) && s > 0)
        {
            _pageSize = s;
            _page = 1;
            _ = DebouncedLoad(0);
        }
    }

    //---- Data Lifecycle ----
    protected override async Task OnInitializedAsync()
    {
        platforms = await Api.GetPlatformsAsync();
        ApplyQueryOnce();
        await Load();
        stats = await Api.GetStatsAsync();
    }

    async Task Load()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            bool? isCib = string.IsNullOrEmpty(selectedCib) ? null : selectedCib == "true" ? true : false;
            page = await Api.GetItemsAsync(selectedPlatform, isCib, _page, _pageSize, search, sort, selectedKind, selectedRegion);
            stats = await Api.GetStatsAsync();

            UpdateQueryUrl();
        }
        catch (Exception ex)
        {
            ToastError($"Load failed: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    async Task Prev()
    {
        if (_page > 1)
        {
            _searchCts?.Cancel();
            _page--;
            await Load();
        }
    }

    async Task Next()
    {
        if (_page < totalPages)
        {
            _searchCts?.Cancel();
            _page++;
            await Load();
        }
    }

    //---- CSV Import ----
    byte[]? lastUpload; string? lastUploadName; bool canCommitImport; string importStatus = "";

    async Task UploadCsvDryRun(InputFileChangeEventArgs e)
    {
        importStatus = "Validating upload (dry run)…";
        var file = e.File;
        using var stream = file.OpenReadStream(long.MaxValue);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        lastUpload = ms.ToArray();
        lastUploadName = file.Name;

        using var post = new MemoryStream(lastUpload);
        var json = await Api.ImportCsvAsync(post, file.Name, dryRun: true);
        canCommitImport = true;
        importStatus = "Dry-run OK. Click 'Commit last upload' to insert.";
    }

    async Task ConfirmImport()
    {
        if (lastUpload is null || lastUploadName is null) return;
        importStatus = "Importing…";
        using var post = new MemoryStream(lastUpload);
        var json = await Api.ImportCsvAsync(post, lastUploadName, dryRun: false);
        canCommitImport = false;
        importStatus = "Imported. Refreshing…";
        _page = 1;
        await Load();
        stats = await Api.GetStatsAsync();
    }

    //---- Filter Inputs ----
    void OnSearchInput(ChangeEventArgs e)
    {
        search = e.Value?.ToString();
        _ = DebouncedLoad();
    }

    void ClearSearch()
    {
        if (string.IsNullOrWhiteSpace(search)) return;
        search = "";
        _ = DebouncedLoad(0);
    }

    void OnPlatformChange(ChangeEventArgs e)
    {
        selectedPlatform = e.Value?.ToString();
        _page = 1;
        _ = DebouncedLoad();
    }

    void OnCibChange(ChangeEventArgs e)
    {
        selectedCib = e.Value?.ToString();
        _page = 1;
        _ = DebouncedLoad();
    }

    void OnSortChange(ChangeEventArgs e)
    {
        sort = e.Value?.ToString() ?? "value_desc";
        _page = 1;
        _ = DebouncedLoad();
    }

    async Task DebouncedLoad(int delayMs = 300)
    {
        _searchCts?.Cancel();
        _searchCts = new CancellationTokenSource();
        var token = _searchCts.Token;

        try
        {
            await Task.Delay(delayMs, token);
            if (token.IsCancellationRequested) return;

            await Load();
            StateHasChanged();
        }
        catch (TaskCanceledException) { }
    }

    //---- Edit/Create Handlers ----
    async Task StartEdit(ApiClient.ItemDto source)
    {
        editing = new ApiClient.ItemDto
        {
            id = source.id,
            title = source.title,
            region = source.region,
            notes = source.notes,
            condition = source.condition,
            hasBox = source.hasBox,
            hasManual = source.hasManual,
            purchasePrice = source.purchasePrice,
            purchaseDate = source.purchaseDate,
            estimatedValue = source.estimatedValue,

            publisher = source.publisher,
            developer = source.developer,
            genre = source.genre,
            releaseYear = source.releaseYear,
            barcode = source.barcode,
            kind = source.kind,

            platform = source.platform is null ? null : new ApiClient.PlatformDto
            {
                id = source.platform.id,
                name = source.platform.name
            }
        };

        editStatus = "";
        await JS.InvokeVoidAsync("modal.show", "editModal");
        StateHasChanged();
    }

    async Task OpenNewModal()
    {
        ShowNew = true;
        await JS.InvokeVoidAsync("modal.show", "newModal");
    }

    async Task CloseNewModal()
    {
        ShowNew = false;
        ResetNew();
        await JS.InvokeVoidAsync("modal.hide", "newModal");
    }

    async void CancelEdit()
    {
        editing = null;
        editStatus = "";
        await JS.InvokeVoidAsync("modal.hide", "editModal");
    }

    async Task SaveEdit()
    {
        if (editing is null) return;

        var plat = platforms.FirstOrDefault(p => p.name == editing!.platform?.name);
        if (plat.name is null)
        {
            editStatus = "Select a platform.";
            return;
        }

        static string? NullIfEmpty(string? s) => string.IsNullOrWhiteSpace(s) ? null : s;
        static int? NullIfZero(int? n) => (n is null || n == 0) ? null : n;

        var payload = new ApiClient.ItemDto
        {
            id = editing.id,
            title = editing.title,
            region = editing.region,
            notes = editing.notes,
            condition = editing.condition,
            hasBox = editing.hasBox,
            hasManual = editing.hasManual,
            purchasePrice = editing.purchasePrice,
            purchaseDate = editing.purchaseDate,
            estimatedValue = editing.estimatedValue,
            publisher = editing.publisher,
            developer = editing.developer,
            genre = editing.genre,
            releaseYear = editing.releaseYear,
            barcode = editing.barcode,
            kind = editing.kind,
            platform = new ApiClient.PlatformDto { id = plat.id, name = plat.name }
        };

        var body = new
        {
            id = payload.id,
            title = payload.title,
            region = NullIfEmpty(payload.region),
            condition = payload.condition,

            hasBox = payload.hasBox,
            hasManual = payload.hasManual,

            purchasePrice = payload.purchasePrice,
            purchaseDate = NullIfEmpty(payload.purchaseDate),
            estimatedValue = payload.estimatedValue,

            notes = NullIfEmpty(payload.notes),
            publisher = NullIfEmpty(payload.publisher),
            developer = NullIfEmpty(payload.developer),
            genre = NullIfEmpty(payload.genre),
            barcode = NullIfEmpty(payload.barcode),

            releaseYear = NullIfZero(payload.releaseYear),
            kind = NullIfEmpty(payload.kind),

            platformId = plat.id
        };

        var ok = await Http.PutAsJsonAsync($"/api/items/{payload.id}", body);
        if (!ok.IsSuccessStatusCode)
        {
            var details = await ok.Content.ReadAsStringAsync();
            editStatus = $"Save failed: {(int)ok.StatusCode} - {details}";
            return;
        }

        ToastOk("Item Saved.");
        await JS.InvokeVoidAsync("modal.hide", "editModal");

        editStatus = "Saved.";
        editing = null;
        _page = 1;
        await Load();
        stats = await Api.GetStatsAsync();
    }

    async Task ConfirmDelete(int id)
    {
        if (!await JSConfirm("Delete this item?")) return;

        var ok = await Api.DeleteItemAsync(id);
        if (!ok) { importStatus = "Delete failed."; return; }
        importStatus = "Deleted.";
        _page = 1;
        await Load();
        stats = await Api.GetStatsAsync();
    }

    void ResetNew()
    {
        NewItem = new() { condition = "Good", region = "NTSC-U" };
        NewPlatformName = null;
        NewErrors["title"] = "";
        NewErrors["platform"] = "";
        createStatus = "";
    }

    bool ValidateNew()
    {
        NewErrors["title"] = string.IsNullOrWhiteSpace(NewItem.title) ? "Title is required." : "";
        NewErrors["platform"] = string.IsNullOrWhiteSpace(NewPlatformName) ? "Platform is required." : "";
        return NewErrors["title"] == "" && NewErrors["platform"] == "";
    }

    async Task Create()
    {
        if (!ValidateNew()) return;

        var plat = platforms.First(p => p.name == NewPlatformName);
        var body = new
        {
            title = NewItem.title,
            platformId = plat.id,
            region = NewItem.region,
            condition = NewItem.condition,
            hasBox = NewItem.hasBox,
            hasManual = NewItem.hasManual,
            estimatedValue = NewItem.estimatedValue,
            purchasePrice = NewItem.purchasePrice,
            purchaseDate = NewItem.purchaseDate,
            notes = NewItem.notes,
            publisher = NewItem.publisher,
            developer = NewItem.developer,
            genre = NewItem.genre,
            releaseYear = NewItem.releaseYear,
            barcode = NewItem.barcode,
            kind = NewItem.kind
        };

        createStatus = "Saving…";
        var ok = await Api.CreateItemAsync(body);
        if (!ok) { createStatus = "Create failed."; return; }

        ToastOk("Item Created.");
        createStatus = "Created.";
        await JS.InvokeVoidAsync("modal.hide", "newModal");
        ShowNew = false;
        ResetNew();

        _page = 1;
        await Load();
        stats = await Api.GetStatsAsync();
        StateHasChanged();
    }

    //---- Login ----
    async Task OpenLoginModal()
    {
        _loginPw = "";
        _loginError = "";
        _showPw = false;
        await JS.InvokeVoidAsync("modal.show", "loginModal");
    }

    async Task CloseLoginModal()
    {
        _loginPw = "";
        _loginError = "";
        await JS.InvokeVoidAsync("modal.hide", "loginModal");
    }

    public sealed class LoginResult
    {
        public bool ok { get; set; }
        public int status { get; set; }
    }

    async Task SubmitLogin()
    {
        if (_loginBusy) return;
        _loginBusy = true;
        _loginError = "";
        StateHasChanged();

        try
        {
            var result = await JS.InvokeAsync<LoginResult>("nc.postLogin", _loginPw);

            if (result.ok)
            {
                await JS.InvokeVoidAsync("modal.hide", "loginModal");
                Nav.NavigateTo(Nav.Uri, forceLoad: true);
            }
            else
            {
                _loginError = result.status == 401 ? "Incorrect password. Please try again." : $"Error: {result.status}";
            }
        }
        catch (Exception ex)
        {
            _loginError = $"Login failed: {ex.Message}";
        }
        finally
        {
            _loginBusy = false;
            StateHasChanged();
        }
    }

    async Task SubmitLoginForm()
    {
        if (_loginBusy) return;
        _loginBusy = true;
        _loginError = "";
        StateHasChanged();

        await JS.InvokeVoidAsync("eval", "document.getElementById('loginForm').submit();"); 
    }

    //---- Item Details ----
    async Task OpenDetails(int id)
    {
        details = await Api.GetItemByIdAsync(id);
        if (details is null) { ToastError("Item not found."); return; }
        showDetails = true;
        await JS.InvokeVoidAsync("bootstrapModalShow", "#detailsModal");
    }

    string FmtDateISO(string? s)
    {
        if (string.IsNullOrWhiteSpace(s)) return "";
        if (DateOnly.TryParse(s, out var d)) return d.ToString("yyyy-MM-dd");
        if (DateTime.TryParse(s, out var dt)) return dt.ToString("yyyy-MM-dd");
        return s;
    }

    string ToDateInputValue(string? s)
    {
        if (string.IsNullOrWhiteSpace(s)) return "";
        if (DateOnly.TryParse(s, out var d)) return d.ToString("yyyy-MM-dd");
        if (DateTime.TryParse(s, out var dt)) return dt.ToString("yyyy-MM-dd");
        return ""; 
    }

    void OnEditPurchaseDateChanged(ChangeEventArgs e)
    {
        var v = e.Value?.ToString();
        editing!.purchaseDate = string.IsNullOrWhiteSpace(v) ? null : v;
    }

    void OnNewPurchaseDateChanged(ChangeEventArgs e)
    {
        var v = e.Value?.ToString();
        NewItem!.purchaseDate = string.IsNullOrWhiteSpace(v) ? null : v;
    }

    void OnKindChange(ChangeEventArgs e)
    {
        selectedKind = e.Value?.ToString();
        _page = 1;
        _ = DebouncedLoad();
    }

    void OnRegionChange(ChangeEventArgs e)
    {
        selectedRegion = e.Value?.ToString();
        _page = 1;
        _ = DebouncedLoad();
    }

    async Task<bool> JSConfirm(string message) => await JS.InvokeAsync<bool>("confirm", message);
}
