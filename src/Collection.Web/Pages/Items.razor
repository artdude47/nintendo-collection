@page "/items"
@using Collection.Web.Services
@inject ApiClient Api

<h1 class="mb-3">Nintendo Collection</h1>

<div class="mb-3">
  <label>Platform:</label>
  <select @bind="selectedPlatform">
    <option value="">(All)</option>
    @foreach (var p in platforms)
    {
      <option value="@p.name">@p.name</option>
    }
  </select>

  <label class="ms-3">CIB:</label>
  <select @bind="selectedCib">
    <option value="">(Any)</option>
    <option value="true">CIB only</option>
    <option value="false">Non-CIB only</option>
  </select>

  <button class="ms-3" @onclick="Load">Apply</button>
  <a class="ms-3" href="@Api.ExportUrl()">Export CSV</a>
</div>

<div class="mb-3">
  <InputFile OnChange="UploadCsvDryRun" /> 
  <button class="ms-2" @onclick="ConfirmImport" disabled="@(!canCommitImport)">Commit last upload</button>
  <span class="ms-2 text-muted">@importStatus</span>
</div>

@if (page.items.Count == 0)
{
  <p>No items.</p>
}
else
{
  <table class="table table-striped table-sm">
    <thead>
      <tr>
        <th>Title</th>
        <th>Platform</th>
        <th>CIB</th>
        <th>Condition</th>
        <th>Est. Value</th>
        <th>Notes</th>
      </tr>
    </thead>
    <tbody>
    @foreach (var i in page.items)
    {
      <tr>
        <td>@i.title</td>
        <td>@i.platform?.name</td>
        <td>@(i.hasBox && i.hasManual ? "Yes" : "No")</td>
        <td>@i.condition</td>
        <td>@(i.estimatedValue?.ToString("0.##") ?? "")</td>
        <td>@i.notes</td>
      </tr>
    }
    </tbody>
  </table>

  <div class="d-flex align-items-center">
    <button @onclick="Prev" disabled="@(_page <= 1)">Prev</button>
    <span class="mx-3">Page @_page of @totalPages ( @(page.total) items )</span>
    <button @onclick="Next" disabled="@(_page >= totalPages)">Next</button>
  </div>
}

@code {
  List<ApiClient.PlatformDto> platforms = new();
  ApiClient.Page<ApiClient.ItemDto> page = new(0,1,50,new());
  string? selectedPlatform;
  string? selectedCib; // "", "true", "false"
  int _page = 1;
  int _pageSize = 50;
  int totalPages => Math.Max(1, (int)Math.Ceiling((double)page.total / _pageSize));

  // upload state
  byte[]? lastUpload; string? lastUploadName; bool canCommitImport; string importStatus = "";

  protected override async Task OnInitializedAsync()
  {
    platforms = await Api.GetPlatformsAsync();
    await Load();
  }

  async Task Load()
  {
    bool? isCib = selectedCib == null || selectedCib == "" ? null :
                  selectedCib == "true" ? true : false;
    page = await Api.GetItemsAsync(selectedPlatform, isCib, _page, _pageSize);
    StateHasChanged();
  }

  void Prev() { if (_page > 1) { _page--; _ = Load(); } }
  void Next() { if (_page < totalPages) { _page++; _ = Load(); } }

  async Task UploadCsvDryRun(InputFileChangeEventArgs e)
  {
    importStatus = "Validating upload (dry run)…";
    var file = e.File;
    using var stream = file.OpenReadStream(long.MaxValue);
    using var ms = new MemoryStream();
    await stream.CopyToAsync(ms);
    lastUpload = ms.ToArray();
    lastUploadName = file.Name;

    using var post = new MemoryStream(lastUpload);
    var json = await Api.ImportCsvAsync(post, file.Name, dryRun: true);
    canCommitImport = true;
    importStatus = "Dry-run OK. Click 'Commit last upload' to insert.";
  }

  async Task ConfirmImport()
  {
    if (lastUpload is null || lastUploadName is null) return;
    importStatus = "Importing…";
    using var post = new MemoryStream(lastUpload);
    var json = await Api.ImportCsvAsync(post, lastUploadName, dryRun: false);
    canCommitImport = false;
    importStatus = "Imported. Refreshing…";
    _page = 1;
    await Load();
  }
}
